/* CTF 1.8 */

/*
 * The following TSDL code was generated by barectf v2.2.0
 * on 2016-08-08 15:20:01.200382.
 *
 * For more details, see <https://github.com/efficios/barectf>.
 */

trace {
	major = 1;
	minor = 8;
	byte_order = le;
	uuid = "cf95b1b6-5d6a-11e6-8e1e-50465d9e565c";
	packet.header := struct {
		integer {
			size = 32;
			align = 32;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} magic;
		integer {
			size = 8;
			align = 8;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} uuid[16];
		integer {
			size = 8;
			align = 8;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} stream_id;
	} align(1);
};

env {
	tracer_major = 2;
	domain = "bare";
	tracer_name = "barectf";
	barectf_gen_date = "2016-08-08T15:20:01.200287";
	tracer_patch = 0;
	tracer_minor = 2;
};

clock {
	name = default;
	freq = 1000000000;
	offset_s = 1434072888;
	offset = 0;
	precision = 0;
	absolute = false;
};

/* default */
stream {
	id = 0;
	packet.context := struct {
		integer {
			size = 64;
			align = 64;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
			map = clock.default.value;
		} timestamp_begin;
		integer {
			size = 64;
			align = 64;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
			map = clock.default.value;
		} timestamp_end;
		integer {
			size = 32;
			align = 32;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} packet_size;
		integer {
			size = 32;
			align = 32;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} content_size;
		integer {
			size = 32;
			align = 32;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} events_discarded;
	} align(1);
	event.header := struct {
		integer {
			size = 16;
			align = 16;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} id;
	} align(1);
	event.context := struct {
		integer {
			size = 64;
			align = 64;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} tid;
	} align(1);
};

event {
	name = "instr";
	id = 0;
	stream_id = 0; /* default */
	fields := struct {
		integer {
			size = 64;
			align = 64;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} pc;
	} align(1);
};

event {
	name = "mem";
	id = 1;
	stream_id = 0; /* default */
	fields := struct {
		enum : integer {
			size = 8;
			align = 8;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} {
			"read" = 0,
			"write" = 1,
			"modify" = 2,
		} op;
		integer {
			size = 64;
			align = 64;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} addr;
		integer {
			size = 64;
			align = 64;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} size;
	} align(1);
};
